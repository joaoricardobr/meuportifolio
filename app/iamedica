

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Análise Médicas IA - Análise Inteligente</title>
    <!-- Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome para ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- jsPDF para gerar PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Estilos CSS (mantidos da versão anterior com tema azul) */
        /* --- Base & Transitions --- */
        body { font-family: 'Inter', sans-serif; background-color: #f7f8fc; color: #1f2937; transition: background-color 0.3s ease, color 0.3s ease; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(8px); } to { opacity: 1; transform: translateY(0); } }
        .fade-in { animation: fadeIn 0.4s ease-out forwards; }
        .smooth-transition { transition: all 0.2s ease-in-out; }

        /* --- Dark Theme --- */
        .dark-theme { background-color: #111827; color: #e5e7eb; }
        .dark-theme .card-bg { background-color: #1f2937; }
        .dark-theme .secondary-bg { background-color: #374151; }
        .dark-theme .tertiary-bg { background-color: #4b5563; }
        .dark-theme .text-color-base { color: #e5e7eb; }
        .dark-theme .text-color-secondary { color: #d1d5db; }
        .dark-theme .text-color-muted { color: #9ca3af; }
        .dark-theme .text-color-faint { color: #6b7280; }
        .dark-theme .border-color-light { border-color: #374151; }
        .dark-theme .border-color-base { border-color: #4b5563; }
        .dark-theme .shadow-card { box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2); }
        .dark-theme input, .dark-theme select { background-color: #374151; color: #e5e7eb; border-color: #4b5563; }
        .dark-theme input::placeholder { color: #9ca3af; }
        .dark-theme input:focus, .dark-theme select:focus { border-color: #60a5fa; box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.3); }
        .dark-theme .dropzone { background-color: #1f2937; border-color: #60a5fa; }
        .dark-theme .dropzone.dragover { background-color: #374151; border-color: #3b82f6; }
        .dark-theme .modal-content { background-color: #1f2937; border: 1px solid #374151; }
        .dark-theme .tab-button { color: #9ca3af; } .dark-theme .tab-button:hover { color: #e5e7eb; } .dark-theme .tab-button.active { color: #93c5fd; border-color: #93c5fd; }
        .dark-theme .icon-button:hover { background-color: #374151; }
        .dark-theme .text-green-600 { color: #6ee7b7; } .dark-theme .bg-green-600 { background-color: #10b981; color: #fff; } .dark-theme .hover\:bg-green-700:hover { background-color: #059669; }
        .dark-theme .text-blue-600 { color: #93c5fd; } .dark-theme .bg-blue-600 { background-color: #60a5fa; color: #111827; } .dark-theme .hover\:bg-blue-700:hover { background-color: #3b82f6; }
        .dark-theme .text-red-600 { color: #f87171; } .dark-theme .bg-red-600 { background-color: #dc2626; color: #fff; } .dark-theme .hover\:bg-red-700:hover { background-color: #b91c1c; }
        .dark-theme .text-teal-600 { color: #5eead4; } .dark-theme .bg-teal-600 { background-color: #14b8a6; color: #fff; } .dark-theme .hover\:bg-teal-700:hover { background-color: #0d9488; }
        .dark-theme .text-orange-500 { color: #fb923c; } .dark-theme .text-purple-500 { color: #c084fc; }
        .dark-theme .history-item { background-color: #1f2937; } .dark-theme .history-item:hover { background-color: #374151; } .dark-theme .history-item img { border: 1px solid #4b5563; }
        .dark-theme .active-view { background-color: #4b5563; } .dark-theme .pagination-button { background-color: #374151; color: #d1d5db; } .dark-theme .pagination-button:hover { background-color: #4b5563; }
        .dark-theme .report-section h4 { color: #93c5fd; border-bottom-color: #4b5563; }
        .dark-theme .text-color-heading { color: #f9fafb; }
        .dark-theme .loading-overlay .fa-spinner { color: #60a5fa; }
        .dark-theme .dropzone .icon { color: #93c5fd; }
        .dark-theme .modal-content { scrollbar-color: #718096 #1f2937; } .dark-theme .modal-content::-webkit-scrollbar-track { background: #1f2937; } .dark-theme .modal-content::-webkit-scrollbar-thumb { background: #718096; }

        /* --- General Styles --- */
        .card-bg { background-color: #ffffff; } .secondary-bg { background-color: #f9fafb; } .tertiary-bg { background-color: #f3f4f6; }
        .text-color-base { color: #1f2937; } .text-color-secondary { color: #374151; } .text-color-muted { color: #6b7280; } .text-color-faint { color: #9ca3af; }
        .border-color-light { border-color: #e5e7eb; } .border-color-base { border-color: #d1d5db; } .shadow-card { box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.04); }
        .text-color-heading { color: #111827; }

        /* --- Header --- */
        header { border-bottom: 1px solid; }
        #apiKeyIndicator { width: 8px; height: 8px; border-radius: 50%; display: inline-block; margin-left: 6px; transition: background-color 0.3s ease; }
        #apiKeyIndicator.valid { background-color: #10b981; } #apiKeyIndicator.invalid { background-color: #ef4444; }

        /* --- Buttons --- */
        .button { padding: 10px 20px; border-radius: 8px; font-weight: 500; display: inline-flex; align-items: center; justify-content: center; gap: 8px; cursor: pointer; border: none; line-height: 1.25; box-shadow: 0 1px 2px rgba(0,0,0,0.05); transition: all 0.15s ease-in-out; }
        .button:hover { transform: translateY(-1px); box-shadow: 0 3px 5px rgba(0,0,0,0.07); } .button:active { transform: translateY(0); box-shadow: 0 1px 2px rgba(0,0,0,0.05); } .button:disabled { opacity: 0.6; cursor: not-allowed; transform: none; box-shadow: none; }
        .button-primary { background-color: #3b82f6; color: white; } .dark-theme .button-primary { background-color: #60a5fa; color: #111827; } .button-primary:hover { background-color: #2563eb; } .dark-theme .button-primary:hover { background-color: #3b82f6; }
        .button-secondary { background-color: #e5e7eb; color: #374151; } .dark-theme .button-secondary { background-color: #4b5563; color: #e5e7eb; } .button-secondary:hover { background-color: #d1d5db; } .dark-theme .button-secondary:hover { background-color: #6b7280; }
        .button-danger { background-color: #ef4444; color: white; } .dark-theme .button-danger { background-color: #dc2626; } .button-danger:hover { background-color: #dc2626; } .dark-theme .button-danger:hover { background-color: #b91c1c; }
        .icon-button { padding: 0; width: 36px; height: 36px; border-radius: 50%; font-size: 0.9rem; background-color: transparent; color: #6b7280; box-shadow: none; transition: background-color 0.2s ease, color 0.2s ease; }
        .icon-button:hover { background-color: #f3f4f6; color: #1f2937; } .dark-theme .icon-button { color: #9ca3af; } .dark-theme .icon-button:hover { background-color: #374151; color: #e5e7eb; }

        /* --- Inputs & Selects --- */
        input[type="text"], input[type="password"], input[type="file"], select { padding: 10px 14px; border: 1px solid; border-radius: 8px; background-color: #ffffff; transition: border-color 0.2s ease, box-shadow 0.2s ease; width: 100%; font-size: 0.9rem; border-color: #d1d5db; }
        input[type="text"]:focus, input[type="password"]:focus, select:focus { outline: none; border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3); }
        select { appearance: none; background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2220%22%20height%3D%2220%22%20fill%3D%22none%22%20stroke%3D%22%236b7280%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%221.5%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M6%209l6%206%206-6%22%2F%3E%3C%2Fsvg%3E'); background-repeat: no-repeat; background-position: right 14px center; background-size: 1em; padding-right: 40px; }
        .dark-theme select { background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2220%22%20height%3D%2220%22%20fill%3D%22none%22%20stroke%3D%22%239ca3af%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%221.5%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20d%3D%22M6%209l6%206%206-6%22%2F%3E%3C%2Fsvg%3E'); }

        /* --- Dropzone --- */
        .dropzone { border: 2px dashed; border-radius: 12px; padding: 2rem 1rem; text-align: center; position: relative; min-height: 220px; display: flex; flex-direction: column; justify-content: center; align-items: center; cursor: pointer; transition: background-color 0.3s ease, border-color 0.3s ease; border-color: #60a5fa; background-color: #eff6ff; }
        .dropzone.dragover { border-color: #3b82f6; background-color: #dbeafe; }
        .dropzone video { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; border-radius: 11px; z-index: 1; }
        .dropzone .camera-controls-container { position: absolute; bottom: 1rem; left: 50%; transform: translateX(-50%); z-index: 2; background-color: rgba(0, 0, 0, 0.65); padding: 0.5rem 0.75rem; border-radius: 8px; display: flex; gap: 0.75rem; }
        #dropzone-content .icon { font-size: 3rem; margin-bottom: 0.75rem; color: #3b82f6; } .dark-theme #dropzone-content .icon { color: #93c5fd; }

        /* --- Tabs --- */
        .tab-list { border-bottom: 1px solid; }
        .tab-button { padding: 0.75rem 1rem; font-weight: 500; font-size: 0.95rem; border-bottom: 2px solid transparent; margin-bottom: -1px; cursor: pointer; color: #6b7280; transition: color 0.2s ease, border-color 0.2s ease; }
        .tab-button:hover { color: #1f2937; } .tab-button.active { color: #2563eb; border-bottom-color: #2563eb; }
        .tab-panel { padding-top: 1.5rem; }

        /* --- Report Section --- */
        #reportContentWrapper { max-height: none; overflow-y: visible; padding-right: 0; scrollbar-width: none; } #reportContentWrapper::-webkit-scrollbar { display: none; }
        #reportContent { font-size: 0.95rem; line-height: 1.7; }
        #reportContent hr { border: none; border-top: 1px dashed #d1d5db; margin: 1.5rem 0; } /* Separador visual */
        .dark-theme #reportContent hr { border-top-color: #4b5563; }
        .report-section h4 { font-weight: 600; font-size: 1.05rem; margin-top: 1.5rem; margin-bottom: 0.6rem; color: #1e3a8a; display: flex; align-items: center; gap: 0.6rem; padding-bottom: 0.3rem; border-bottom: 1px solid; } .dark-theme .report-section h4 { color: #93c5fd; border-bottom-color: #4b5563; }
        .report-section h4 i { width: 18px; text-align: center; } .report-section p { margin-bottom: 0.7rem; }
        /* Report section icon colors (ajustados para contexto médico) */
        .report-section .fa-search-plus { color: #f97316; } /* Laranja para Achados */
        .report-section .fa-stethoscope { color: #3b82f6; } /* Azul para Diagnóstico */
        .report-section .fa-info-circle { color: #14b8a6; } /* Teal para Observações */
        .report-section .fa-notes-medical { color: #a855f7; } /* Roxo para Recomendações */
        .report-section .fa-check-circle { color: #10b981; } /* Verde para Conclusão */

        /* --- History Section --- */
        .history-controls { margin-bottom: 1.25rem; }
        .history-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem; }
        .history-list { display: flex; flex-direction: column; gap: 0.75rem; }
        .history-item { border-radius: 10px; padding: 1rem; display: flex; overflow: hidden; transition: background-color 0.2s ease, box-shadow 0.2s ease; border: 1px solid; }
        .history-item:hover { background-color: #f9fafb; box-shadow: 0 2px 4px rgba(0,0,0,0.04); }
        .history-list .history-item { flex-direction: row; align-items: center; } .history-grid .history-item { flex-direction: column; align-items: stretch; text-align: center; }
        .history-item img { object-fit: cover; border-radius: 6px; background-color: #f3f4f6; }
        .history-list .history-item img { width: 56px; height: 56px; margin-right: 1rem; flex-shrink: 0; } .history-grid .history-item img { width: 100%; height: 160px; margin-bottom: 0.75rem; }
        .history-item-content { flex-grow: 1; min-width: 0; }
        .history-item-summary { font-weight: 500; font-size: 0.9rem; line-height: 1.4; margin-bottom: 0.25rem; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; }
        .history-item-meta { font-size: 0.75rem; margin-bottom: 0.25rem; }
        .history-item-actions { display: flex; gap: 0.5rem; } .history-list .history-item-actions { margin-left: 1rem; flex-shrink: 0; } .history-grid .history-item-actions { margin-top: 0.75rem; justify-content: center; }
        .active-view { background-color: #e5e7eb; } .pagination-button { background-color: #e5e7eb; color: #374151; } .pagination-button:hover { background-color: #d1d5db; }

        /* --- Modal --- */
        .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0, 0, 0, 0.65); justify-content: center; align-items: center; padding: 1rem; }
        .modal-content { background-color: #ffffff; margin: auto; padding: 1.5rem 2rem; border-radius: 12px; width: 100%; max-width: 750px; max-height: 90vh; overflow-y: auto; box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2); position: relative; scrollbar-width: thin; scrollbar-color: #a0aec0 #f0f0f0; }
        .modal-content::-webkit-scrollbar { width: 8px; } .modal-content::-webkit-scrollbar-thumb { background: #a0aec0; border-radius: 4px; } .modal-content::-webkit-scrollbar-track { background: #f0f0f0; }
        .dark-theme .modal-content { scrollbar-color: #718096 #1f2937; } .dark-theme .modal-content::-webkit-scrollbar-track { background: #1f2937; } .dark-theme .modal-content::-webkit-scrollbar-thumb { background: #718096; }

        /* --- Notification --- */
        .notification { position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); padding: 0.9rem 1.5rem; border-radius: 8px; z-index: 1500; opacity: 0; transition: opacity 0.4s ease, transform 0.4s ease; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15); color: white; font-weight: 500; font-size: 0.9rem; transform: translate(-50%, 20px); }
        .notification.show { opacity: 1; transform: translateX(-50%); }
        .notification.success { background-color: #10b981; } .notification.error { background-color: #ef4444; } .notification.info { background-color: #3b82f6; }

        /* --- Loading Overlay --- */
        .loading-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.8); z-index: 2000; justify-content: center; align-items: center; } .dark-theme .loading-overlay { background: rgba(17, 24, 39, 0.85); }
        .loading-content { display: flex; align-items: center; gap: 1rem; background: #ffffff; padding: 1.25rem 2rem; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); color: #1f2937; } .dark-theme .loading-content { background: #1f2937; color: #e5e7eb; box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
        .loading-overlay .fa-spinner { font-size: 1.5rem; color: #3b82f6; } .dark-theme .loading-overlay .fa-spinner { color: #60a5fa; }

        /* --- Utility --- */
        .hidden { display: none !important; }
        /* --- Aviso de Erro no Relatório --- */
        .report-error-box { padding: 0.75rem 1rem; margin-bottom: 1rem; border-radius: 0.375rem; border: 1px solid; color: #991b1b; background-color: #fef2f2; border-color: #fecaca;}
        .dark-theme .report-error-box { color: #fca5a5; background-color: rgba(153, 27, 27, 0.2); border-color: rgba(220, 38, 38, 0.3); }
        .report-error-box strong { font-weight: 600;}

    </style>
</head>
<body class="min-h-screen flex flex-col text-color-base">

    <!-- Header -->
    <header class="sticky top-0 z-50 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-b border-color-light dark:border-color-base smooth-transition">
        <div class="container mx-auto px-4 md:px-6 py-3 flex justify-between items-center">
            <div class="flex items-center gap-3">
                <i class="fas fa-stethoscope text-2xl text-blue-600"></i>
                <span class="text-xl font-bold text-color-heading">Análise Médicas IA</span>
            </div>
            <div class="flex items-center gap-3">
                 <div class="text-xs text-color-muted hidden md:flex items-center gap-2" id="apiKeyStatusContainer">API Key: <span id="apiKeyStatusText">Não configurada</span><span id="apiKeyIndicator" class="invalid" title="Status da Chave API"></span></div>
                 <button id="configApiKeyButton" class="icon-button" title="Configurar Chave API"><i class="fas fa-key"></i></button>
                 <button id="themeToggle" class="icon-button" title="Alternar Tema"><i class="fas fa-moon"></i></button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto flex-1 p-4 md:px-6 md:py-8 w-full">

        <!-- Action Zone: Config & Upload -->
        <section class="mb-8 md:mb-12 fade-in">
             <div class="card-bg dark:card-bg border border-color-light dark:border-color-base rounded-xl shadow-card p-5 md:p-8">
                 <div class="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8 items-start">
                     <!-- API Key Input -->
                     <div class="md:col-span-1">
                         <h2 class="text-lg font-semibold mb-3 text-color-heading">1. Configurar API</h2>
                         <label for="apiKey" class="block text-sm font-medium mb-1 text-color-secondary">Chave Google AI (Gemini)</label>
                         <input type="password" id="apiKey" placeholder="Cole sua chave aqui..." class="w-full mb-1">
                         <p class="text-xs text-color-muted">Necessária para análise. <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">Obter chave</a></p>
                     </div>

                     <!-- Upload/Camera Zone -->
                     <div class="md:col-span-2">
                          <h2 class="text-lg font-semibold mb-3 text-color-heading">2. Enviar Imagem(s) Médica(s)</h2>
                          <div class="dropzone border-color-base dark:border-color-base card-bg dark:card-bg" id="dropzone">
                              <video id="cameraPreview" class="hidden" playsinline autoplay muted></video>
                              <div id="dropzone-content" class="flex flex-col items-center justify-center text-center">
                                  <i class="fas fa-cloud-upload-alt icon text-blue-500 dark:text-blue-400"></i> <!-- Ícone Upload -->
                                  <!-- Texto Atualizado -->
                                  <p class="text-color-secondary font-medium mb-2">Arraste e solte uma ou mais imagens ou use a câmera</p>
                                  <p class="text-color-muted text-sm mb-4">Formatos: JPG, PNG, WEBP, DICOM</p>
                                  <div class="flex flex-col sm:flex-row justify-center gap-3">
                                      <button id="uploadButton" class="button button-secondary text-sm">
                                          <i class="fas fa-upload"></i> Selecionar Arquivo(s)
                                      </button>
                                      <button id="cameraButton" class="button button-secondary text-sm">
                                          <i class="fas fa-video"></i> Usar Câmera (1 foto)
                                      </button>
                                  </div>
                              </div>
                              <div id="cameraControlsContainer" class="camera-controls-container hidden">
                                   <button id="captureButton" class="button button-danger text-sm px-3 py-2"><i class="fas fa-camera"></i> Capturar & Analisar</button>
                                   <button id="stopCameraButton" class="button button-secondary text-sm px-3 py-2"><i class="fas fa-stop"></i> Parar</button>
                              </div>
                               <canvas id="cameraCanvas" class="hidden"></canvas>
                          </div>
                           <!-- Input com 'multiple' e aceita DICOM -->
                           <input type="file" id="imageInput" accept="image/jpeg, image/png, image/webp, image/dicom, application/dicom" class="hidden" multiple>
                     </div>
                 </div>
            </div>
        </section>

        <!-- Results Zone: Tabs for Report & History -->
        <section class="fade-in" style="animation-delay: 0.1s;">
             <div class="card-bg dark:card-bg border border-color-light dark:border-color-base rounded-xl shadow-card overflow-hidden">
                 <div class="tab-list flex border-b border-color-light dark:border-color-base px-4 md:px-6">
                     <button id="tabButtonReport" role="tab" aria-controls="tabPanelReport" aria-selected="true" class="tab-button active"><i class="fas fa-poll-h mr-2"></i>Análise Atual</button>
                     <button id="tabButtonHistory" role="tab" aria-controls="tabPanelHistory" aria-selected="false" class="tab-button"><i class="fas fa-history mr-2"></i>Histórico</button>
                 </div>
                 <div class="p-5 md:p-8">
                     <div id="tabPanelReport" role="tabpanel" aria-labelledby="tabButtonReport" class="tab-panel">
                         <section id="reportSection">
                             <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-3">
                                 <h3 class="text-xl font-semibold text-color-heading">Relatório(s) da Análise</h3>
                                 <div id="reportControls" class="flex items-center gap-1 sm:gap-2 flex-wrap hidden">
                                     <button id="fontDecrease" class="icon-button" title="Diminuir Fonte"><i class="fas fa-minus"></i></button>
                                     <button id="fontIncrease" class="icon-button" title="Aumentar Fonte"><i class="fas fa-plus"></i></button>
                                     <button id="speakButton" class="icon-button" title="Ler Último Relatório" disabled><i class="fas fa-volume-up"></i></button> <!-- Desabilitado inicialmente -->
                                     <button id="fullScreenButton" class="icon-button text-blue-600 dark:text-blue-400" title="Ver Último em Tela Cheia" disabled><i class="fas fa-expand"></i></button> <!-- Desabilitado inicialmente -->
                                 </div>
                             </div>
                             <div id="reportContentWrapper" class="min-h-[200px]">
                                 <!-- Conteúdo será adicionado aqui -->
                                 <div id="reportContent" class="text-color-secondary">
                                     <p id="reportPlaceholder" class="text-center text-color-muted py-10">Envie uma ou mais imagens para análise.</p>
                                 </div>
                             </div>
                         </section>
                     </div>
                     <div id="tabPanelHistory" role="tabpanel" aria-labelledby="tabButtonHistory" class="tab-panel hidden">
                         <section id="historySection">
                             <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-5 gap-3">
                                 <h3 class="text-xl font-semibold text-color-heading">Histórico de Análises</h3>
                                 <div class="flex items-center gap-2 self-end sm:self-center">
                                      <span class="text-sm text-color-muted mr-1">Ver:</span>
                                      <button id="listView" class="icon-button active-view" title="Lista"><i class="fas fa-list"></i></button>
                                      <button id="gridView" class="icon-button" title="Grade"><i class="fas fa-th-large"></i></button>
                                 </div>
                             </div>
                             <div class="history-controls grid grid-cols-1 md:grid-cols-5 gap-3 items-end">
                                 <div class="relative md:col-span-2">
                                     <label for="searchInput" class="block text-xs font-medium mb-1 text-color-muted">Buscar no texto</label>
                                     <input type="text" id="searchInput" placeholder="Ex: fratura, nódulo..." class="w-full pl-10 text-sm">
                                     <i class="fas fa-search text-color-faint absolute left-3 bottom-[11px]"></i>
                                 </div>
                                 <div>
                                     <label for="categoryFilter" class="block text-xs font-medium mb-1 text-color-muted">Tipo de Análise</label>
                                     <select id="categoryFilter" class="w-full text-sm">
                                         <option value="">Todas</option>
                                         <option value="Radiografia">Radiografia</option><option value="Tomografia">Tomografia</option>
                                         <option value="Ressonância">Ressonância</option><option value="Pele">Pele</option>
                                         <option value="Ultrassom">Ultrassom</option><option value="Mamografia">Mamografia</option>
                                         <option value="Ortopedia">Ortopedia</option><option value="Pulmonar">Pulmonar</option>
                                         <option value="Normal">Normal</option><option value="Com Achados">Com Achados</option>
                                         <option value="Outros">Outros</option><option value="Indefinido">Indefinido</option>
                                     </select>
                                 </div>
                                  <div>
                                     <label for="sortOrder" class="block text-xs font-medium mb-1 text-color-muted">Ordenar</label>
                                     <select id="sortOrder" class="w-full text-sm">
                                         <option value="recent">Recentes</option><option value="oldest">Antigos</option>
                                     </select>
                                  </div>
                                 <button id="applyFilters" class="button button-primary text-sm h-[38px] mt-auto w-full md:w-auto"><i class="fas fa-filter text-xs"></i> Filtrar</button>
                             </div>
                             <div id="historyContainer" class="history-list min-h-[200px]"></div>
                             <p id="noHistory" class="text-center text-color-muted mt-6 py-10 border-t border-dashed border-color-light dark:border-color-base hidden">Nenhuma análise encontrada no histórico.</p>
                             <div id="pagination" class="mt-6 text-center hidden">
                                 <button id="loadMore" class="button pagination-button dark:pagination-button text-sm"><i class="fas fa-chevron-down"></i> Carregar Mais</button>
                             </div>
                         </section>
                     </div>
                 </div>
             </div>
        </section>

    </main>

    <!-- Footer -->
    <footer class="text-center py-6 mt-10 text-sm text-color-muted border-t border-color-light dark:border-color-base">
        Desenvolvido por João Ricardo | <a href="https://instagram.com/joaoricardo.pe" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">@joaoricardo.pe</a>
        <br><span class="text-xs">IA para análise preliminar. Não substitui diagnóstico médico.</span>
    </footer>

    <!-- Modal for Full Report -->
    <div id="reportModal" class="modal">
        <div class="modal-content card-bg dark:card-bg fade-in">
            <div class="flex justify-between items-center mb-5 pb-3 border-b border-color-light dark:border-color-base">
                <h2 class="text-xl font-semibold text-color-heading">Relatório Completo</h2>
                <button id="closeModal" class="icon-button text-red-600" title="Fechar"><i class="fas fa-times"></i></button>
            </div>
            <div id="modalReportContent" class="mb-6 text-color-secondary"></div>
            <div class="flex flex-wrap justify-center gap-3 pt-4 border-t border-color-light dark:border-color-base">
                 <button id="printButton" class="button button-secondary" title="Imprimir"><i class="fas fa-print"></i> Imprimir</button>
                 <button id="whatsappButton" class="button bg-green-600 text-white hover:bg-green-700" title="Compartilhar no WhatsApp"><i class="fab fa-whatsapp"></i> WhatsApp</button>
                 <button id="shareButton" class="button bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600" title="Compartilhar"><i class="fas fa-share-alt"></i> Compartilhar</button>
                 <button id="downloadButton" class="button bg-teal-600 text-white hover:bg-teal-700 dark:bg-teal-500 dark:hover:bg-teal-600" title="Baixar PDF"><i class="fas fa-download"></i> Baixar PDF</button>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification"></div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
         <div class="loading-content">
            <i class="fas fa-spinner fa-spin"></i>
            <span id="loadingMessage">Processando...</span>
        </div>
    </div>

    <script>
        const { jsPDF } = window.jspdf;

        // --- DOM Elements ---
        const apiKeyInput = document.getElementById('apiKey');
        const apiKeyStatusContainer = document.getElementById('apiKeyStatusContainer');
        const apiKeyStatusText = document.getElementById('apiKeyStatusText');
        const apiKeyIndicator = document.getElementById('apiKeyIndicator');
        const configApiKeyButton = document.getElementById('configApiKeyButton');
        const imageInput = document.getElementById('imageInput');
        const uploadButton = document.getElementById('uploadButton');
        const cameraButton = document.getElementById('cameraButton');
        const dropzone = document.getElementById('dropzone');
        const dropzoneContent = document.getElementById('dropzone-content');
        const cameraPreview = document.getElementById('cameraPreview');
        const cameraCanvas = document.getElementById('cameraCanvas');
        const cameraControlsContainer = document.getElementById('cameraControlsContainer');
        const captureButton = document.getElementById('captureButton');
        const stopCameraButton = document.getElementById('stopCameraButton');
        const reportSection = document.getElementById('reportSection');
        const reportControls = document.getElementById('reportControls');
        const reportContentWrapper = document.getElementById('reportContentWrapper');
        const reportContent = document.getElementById('reportContent');
        const reportPlaceholder = document.getElementById('reportPlaceholder'); // Placeholder text element
        const themeToggle = document.getElementById('themeToggle');
        const historySection = document.getElementById('historySection');
        const historyContainer = document.getElementById('historyContainer');
        const searchInput = document.getElementById('searchInput');
        const fullScreenButton = document.getElementById('fullScreenButton');
        const reportModal = document.getElementById('reportModal');
        const modalReportContent = document.getElementById('modalReportContent');
        const closeModal = document.getElementById('closeModal');
        const printButton = document.getElementById('printButton');
        const whatsappButton = document.getElementById('whatsappButton');
        const shareButton = document.getElementById('shareButton');
        const downloadButton = document.getElementById('downloadButton');
        const fontIncrease = document.getElementById('fontIncrease');
        const fontDecrease = document.getElementById('fontDecrease');
        const speakButton = document.getElementById('speakButton');
        const loadMore = document.getElementById('loadMore');
        const pagination = document.getElementById('pagination');
        const gridView = document.getElementById('gridView');
        const listView = document.getElementById('listView');
        const sortOrder = document.getElementById('sortOrder');
        const categoryFilter = document.getElementById('categoryFilter');
        const applyFilters = document.getElementById('applyFilters');
        const notification = document.getElementById('notification');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const loadingMessage = document.getElementById('loadingMessage');
        const noHistory = document.getElementById('noHistory');
        const tabButtonReport = document.getElementById('tabButtonReport');
        const tabButtonHistory = document.getElementById('tabButtonHistory');
        const tabPanelReport = document.getElementById('tabPanelReport');
        const tabPanelHistory = document.getElementById('tabPanelHistory');

        // --- State Variables ---
        let currentResultText = ''; // Stores the text of the *last* successful analysis for modal/share
        let currentImageBase64 = '';// Stores the image of the *last* successful analysis for modal/share
        let lastSuccessfulAnalysisHTML = ''; // Stores the HTML of the *last* analysis for modal display
        let fontSize = 15.2;
        let currentPage = 1;
        const itemsPerPage = 8;
        let viewMode = 'list';
        let filterTerm = '';
        let sortType = 'recent';
        let selectedCategory = '';
        let db;
        let cameraStream = null;
        let allHistoryItems = []; // Holds all history items loaded from DB
        let synth = window.speechSynthesis;
        let utterance = null;
        let currentApiKey = '';
        let isProcessing = false; // Flag to prevent concurrent processing

        // --- Constants ---
        const VALID_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp', 'image/dicom', 'application/dicom'];
        const REPORT_DISCLAIMER_HTML = `<p class="p-3 mb-4 rounded-md bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700/40 text-yellow-800 dark:text-yellow-300 text-sm"><strong><i class="fas fa-exclamation-triangle mr-1"></i> Atenção:</strong> Esta é uma análise preliminar por IA e não substitui a avaliação de um profissional de saúde qualificado.</p>`;
        const PLACEHOLDER_IMG = 'https://via.placeholder.com/150/f0f0f0/cccccc?text=Sem+Imagem';

        // --- IndexedDB Setup ---
        const dbRequest = indexedDB.open('PlantScanDB_v2', 2); // Keep name for compatibility
        dbRequest.onupgradeneeded = (event) => { /* ... same robust upgrade logic ... */
            console.log("Upgrading DB from version", event.oldVersion, "to", event.newVersion);
            db = event.target.result;
            let store;
            if (!db.objectStoreNames.contains('analyses')) {
                store = db.createObjectStore('analyses', { keyPath: 'id', autoIncrement: true });
                console.log("Object store 'analyses' created.");
            } else {
                const transaction = event.target.transaction;
                store = transaction.objectStore('analyses');
            }
            if (!store.indexNames.contains('timestamp')) store.createIndex('timestamp', 'timestamp', { unique: false });
            if (!store.indexNames.contains('category')) store.createIndex('category', 'category', { unique: false });
            if (!store.indexNames.contains('text')) store.createIndex('text', 'text', { unique: false });
            console.log("DB indices ensured.");
        };
        dbRequest.onsuccess = (event) => { /* ... same success logic ... */
            db = event.target.result; console.log("Database opened successfully.");
            loadApiKey(); loadInitialHistory();
        };
        dbRequest.onerror = (event) => { /* ... same error logic ... */
            console.error("Database error:", event.target.error);
            notify('Erro crítico ao acessar o banco de dados local. O histórico não funcionará.', 'error', 5000);
        };

        // --- Utility Functions ---
        function showLoading(message = "Processando...") { loadingMessage.textContent = message; loadingOverlay.style.display = 'flex'; }
        function hideLoading() { loadingOverlay.style.display = 'none'; }
        function notify(message, type = 'info', duration = 3500) { /* ... same ... */
            notification.textContent = message; notification.className = `notification ${type}`;
            requestAnimationFrame(() => { notification.classList.add('show'); });
            if (notification.timeoutId) clearTimeout(notification.timeoutId);
            notification.timeoutId = setTimeout(() => { notification.classList.remove('show'); }, duration);
        }
        function getBase64(file) { /* ... same ... */
            return new Promise((resolve, reject) => {
                if (!file) return reject(new Error("Arquivo nulo fornecido."));
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result.split(',')[1]);
                reader.onerror = error => reject(error);
            });
        }
        function formatResult(text, fileName = '') { /* ... same formatting logic ... */
            let cleanText = (text || '') // Handle potential null/undefined text
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/__(.*?)__/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/_(.*?)_/g, '<em>$1</em>');

            const sections = {
                 'achados principais': { icon: 'fa-search-plus text-orange-500 dark:text-orange-400', title: 'Achados Principais' },
                 'impressão diagnóstica': { icon: 'fa-stethoscope text-blue-500 dark:text-blue-400', title: 'Impressão Diagnóstica' },
                 'diagnóstico provável': { icon: 'fa-stethoscope text-blue-500 dark:text-blue-400', title: 'Diagnóstico Provável' },
                 'diagnóstico': { icon: 'fa-stethoscope text-blue-500 dark:text-blue-400', title: 'Diagnóstico' },
                 'observações': { icon: 'fa-info-circle text-teal-500 dark:text-teal-400', title: 'Observações' },
                 'recomendações': { icon: 'fa-notes-medical text-purple-500 dark:text-purple-400', title: 'Recomendações' },
                 'conclusão': { icon: 'fa-check-circle text-green-500 dark:text-green-400', title: 'Conclusão' }
            };
            let structuredHtml = `<div class="report-file-header text-sm text-color-muted mb-2"><i class="fas fa-file-alt mr-1"></i> Arquivo: ${fileName || 'Desconhecido'}</div>`; // Add file name
            structuredHtml += '<div class="report-sections space-y-3">';
            let currentSectionKey = null, sectionContent = '', introContent = '';

            cleanText.split('\n').forEach(line => { /* ... same section splitting logic ... */
                 const trimmedLine = line.trim(); if (!trimmedLine) return;
                 let isSectionHeader = false, potentialSectionKey = null;
                 const boldMatch = trimmedLine.match(/^<strong>(.*?)<\/strong>[:\s]*/i);
                 const headerText = boldMatch ? boldMatch[1].toLowerCase().trim() : trimmedLine.toLowerCase().replace(/[:\*]$/, '').trim();

                 for (const key in sections) { if (headerText.startsWith(key)) { potentialSectionKey = key; isSectionHeader = true; break; } }

                 if (isSectionHeader) {
                     if (currentSectionKey) structuredHtml += `<div class="report-section"><h4><i class="fas ${sections[currentSectionKey].icon}"></i> ${sections[currentSectionKey].title}</h4><p>${sectionContent.trim().replace(/<br>\s*<br>/g, '<br>')}</p></div>`;
                     else if (introContent) structuredHtml += `<p>${introContent.trim().replace(/<br>\s*<br>/g, '<br>')}</p>`;
                     currentSectionKey = potentialSectionKey;
                     let contentAfterHeader = boldMatch ? trimmedLine.substring(boldMatch[0].length).trim() : trimmedLine.substring(potentialSectionKey.length).replace(/^[:\s\-\*]+/, '').trim();
                     sectionContent = contentAfterHeader ? contentAfterHeader + '<br>' : '';
                 } else {
                     if (currentSectionKey) sectionContent += trimmedLine + '<br>';
                     else introContent += trimmedLine + '<br>';
                 }
             });
            if (currentSectionKey) structuredHtml += `<div class="report-section"><h4><i class="fas ${sections[currentSectionKey].icon}"></i> ${sections[currentSectionKey].title}</h4><p>${sectionContent.trim().replace(/<br>\s*<br>/g, '<br>')}</p></div>`;
            else if (introContent) structuredHtml += `<p>${introContent.trim().replace(/<br>\s*<br>/g, '<br>')}</p>`;

            structuredHtml += '</div>';
            return structuredHtml.includes('<div class="report-section">') || introContent.length > 10 ? structuredHtml : `<p>${cleanText.replace(/\n/g, '<br>')}</p>`; // Basic fallback
        }
        function getCategory(text, fileType = '') { /* ... same improved category logic ... */
             const lowerText = (text || '').toLowerCase(); // Handle null/undefined text
             if (fileType.includes('dicom')) return 'Imagem Médica';
             if (lowerText.includes('radiografia') || lowerText.includes('raio-x')) return 'Radiografia';
             if (lowerText.includes('tomografia')) return 'Tomografia';
             if (lowerText.includes('ressonância')) return 'Ressonância';
             if (lowerText.includes('pele') || lowerText.includes('dermatologia') || lowerText.includes('lesão cutânea')) return 'Pele';
             if (lowerText.includes('ultrassom') || lowerText.includes('ultrassonografia')) return 'Ultrassom';
             if (lowerText.includes('mamografia') || lowerText.includes('mama')) return 'Mamografia';
             if (lowerText.includes('fratura')) return 'Ortopedia';
             if (lowerText.includes('nódulo pulmonar') || lowerText.includes('pneumonia')) return 'Pulmonar';
             if (lowerText.includes('normal') || lowerText.includes('sem alterações significativas')) return 'Normal';
             if (lowerText.includes('achados') || lowerText.includes('alterações')) return 'Com Achados';
             return 'Outros'; // Default category
        }
        function createErrorBoxHTML(fileName, errorMessage) {
             return `
                 <div class="report-error-box">
                     <div class="text-sm text-color-muted mb-1"><i class="fas fa-file-alt mr-1"></i> Arquivo: ${fileName || 'Desconhecido'}</div>
                     <strong><i class="fas fa-times-circle mr-1"></i> Erro na Análise:</strong> ${errorMessage}
                 </div>
             `;
         }


        // --- API Key Handling ---
        function loadApiKey() { /* ... same ... */ currentApiKey = localStorage.getItem('geminiApiKey') || ''; apiKeyInput.value = currentApiKey; updateApiKeyStatus(); }
        function saveApiKey() { /* ... same ... */ currentApiKey = apiKeyInput.value.trim(); if (currentApiKey) { localStorage.setItem('geminiApiKey', currentApiKey); notify('Chave API salva localmente.', 'success'); } else { localStorage.removeItem('geminiApiKey'); notify('Chave API removida.', 'info'); } updateApiKeyStatus(); }
        function updateApiKeyStatus() { /* ... same ... */
             const isValid = !!currentApiKey;
             apiKeyIndicator.classList.toggle('valid', isValid); apiKeyIndicator.classList.toggle('invalid', !isValid);
             apiKeyStatusText.textContent = isValid ? 'Configurada' : 'Não configurada'; apiKeyStatusContainer.title = isValid ? "Chave API configurada." : "Chave API não configurada.";
        }
        apiKeyInput.addEventListener('change', saveApiKey);
        configApiKeyButton.addEventListener('click', () => { apiKeyInput.focus(); apiKeyInput.scrollIntoView({ behavior: 'smooth', block: 'center' }); });

        // --- File Processing Logic (NEW) ---
        async function processFiles(fileList) {
            if (isProcessing) { notify("Aguarde a análise atual terminar.", "info"); return; }
            if (!currentApiKey) { notify('Por favor, configure sua chave de API Gemini primeiro.', 'error'); apiKeyInput.focus(); return; }
            if (!fileList || fileList.length === 0) { notify('Nenhum arquivo selecionado.', 'info'); return; }

            isProcessing = true;
            activateTab('report');
            reportContent.innerHTML = ''; // Clear previous results
            reportPlaceholder.classList.add('hidden'); // Hide placeholder
            reportControls.classList.add('hidden'); // Hide controls initially
            let successCount = 0;
            let errorCount = 0;
            currentResultText = ''; // Clear last result state
            currentImageBase64 = '';
            lastSuccessfulAnalysisHTML = '';
            speakButton.disabled = true; // Disable controls
            fullScreenButton.disabled = true;

            const filesToProcess = Array.from(fileList).filter(file => {
                const fileType = file.type || ''; // Get MIME type
                 // Basic check for common medical/image types + DICOM extension check
                 const isValidType = VALID_MIME_TYPES.includes(fileType.toLowerCase()) ||
                                     (file.name || '').toLowerCase().endsWith('.dcm');
                 if (!isValidType) {
                     console.warn(`Arquivo ignorado (tipo inválido): ${file.name} (${fileType})`);
                     reportContent.insertAdjacentHTML('beforeend', createErrorBoxHTML(file.name, `Tipo de arquivo não suportado (${fileType || 'desconhecido'}).`));
                     reportContent.insertAdjacentHTML('beforeend', '<hr>');
                     errorCount++;
                 }
                 return isValidType;
             });


            if (filesToProcess.length === 0) {
                isProcessing = false;
                if (errorCount > 0) notify("Nenhum arquivo válido para análise.", "error");
                else notify("Nenhum arquivo selecionado.", "info"); // Should not happen if fileList had items, but safety check
                reportPlaceholder.classList.remove('hidden');
                return;
            }

            // Process files sequentially
            for (let i = 0; i < filesToProcess.length; i++) {
                const file = filesToProcess[i];
                showLoading(`Analisando ${i + 1} de ${filesToProcess.length}: ${file.name}...`);

                // Add separator before each new result (except the first one)
                if (reportContent.innerHTML.trim() !== '') {
                    reportContent.insertAdjacentHTML('beforeend', '<hr>');
                }

                const success = await analyzeImage(file); // analyzeImage now returns true/false
                if (success) {
                    successCount++;
                } else {
                    errorCount++;
                }
            }

            hideLoading();
            isProcessing = false;

            if (successCount > 0) {
                reportControls.classList.remove('hidden'); // Show controls if at least one success
                speakButton.disabled = false;
                fullScreenButton.disabled = false;
            } else {
                reportPlaceholder.classList.remove('hidden'); // Show placeholder if all failed
                 reportPlaceholder.textContent = "Falha ao analisar as imagens enviadas.";
            }

            // Final notification
            let finalMessage = `Análise de ${filesToProcess.length} arquivo(s) concluída.`;
            if (successCount > 0) finalMessage += ` ${successCount} com sucesso`;
            if (errorCount > 0) finalMessage += `${successCount > 0 ? ',' : ''} ${errorCount} com erro(s)`;
            notify(finalMessage, errorCount > 0 ? (successCount > 0 ? 'info' : 'error') : 'success', 5000);
            reportSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }


        // --- Core Functionality: analyzeImage (Modified to append results & return status) ---
        async function analyzeImage(file) {
             let base64Image;
             let analysisText = ''; // Store text for this specific file
             let analysisHTML = ''; // Store HTML for this specific file

            try {
                 // 1. Convert to Base64
                base64Image = await getBase64(file);
                // Determine MIME type for API (important for Gemini)
                let mimeType = VALID_MIME_TYPES.includes(file.type.toLowerCase()) ? file.type : 'application/octet-stream'; // Fallback
                if ((file.name || '').toLowerCase().endsWith('.dcm') && !file.type) mimeType = 'application/dicom'; // Try common DICOM mime if type unknown


                 // 2. Prepare API Request
                 const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${currentApiKey}`;
                 const medicalPrompt = "Você é um assistente de IA especializado em análise preliminar de imagens médicas. Analise esta imagem e forneça um relatório conciso em português do Brasil, formatado claramente. Inclua seções como:\n1. **Achados Principais:** Descreva as características visuais mais relevantes ou anormais.\n2. **Impressão Diagnóstica:** Com base nos achados, qual a suspeita inicial? (Liste possibilidades se houver incerteza).\n3. **Observações:** Comentários adicionais relevantes (qualidade da imagem, limitações, etc.).\n4. **Recomendações:** Sugira próximos passos (ex: consulta especialista, exames adicionais).\n\n**AVISO IMPORTANTE:** Sua análise é PRELIMINAR e NÃO SUBSTITUI um diagnóstico médico profissional. Sempre consulte um médico qualificado para interpretação final e decisões clínicas.\n\nFormate usando os títulos em negrito. Seja objetivo e técnico, mas claro.";

                 const requestBody = {
                     contents: [{ parts: [{ text: medicalPrompt }, { inline_data: { mime_type: mimeType, data: base64Image } }] }],
                     generationConfig: { temperature: 0.4, /* maxOutputTokens: 1024 */ },
                     safetySettings: [/* ... same safety settings ... */
                          { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" }, { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
                          { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_MEDIUM_AND_ABOVE" }, { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" }
                     ]
                 };

                 // 3. Call API
                 const response = await fetch(GEMINI_API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestBody) });
                 const responseData = await response.json();

                 // 4. Process Response
                 if (!response.ok) {
                      console.error(`API Error for ${file.name}:`, responseData);
                      const errorMsg = responseData.error?.message || `Erro ${response.status} na API.`;
                      if (response.status === 400 && errorMsg.toLowerCase().includes('api key not valid')) throw new Error("Chave API inválida.");
                      throw new Error(errorMsg); // Throw specific error
                 }
                 if (!responseData.candidates?.length) { /* ... same safety/empty handling ... */
                     let reason = "Resposta inesperada da API (sem candidatos).";
                     if (responseData.promptFeedback?.blockReason) { reason = `Análise bloqueada (${responseData.promptFeedback.blockReason}).`; }
                     throw new Error(reason);
                 }
                 const candidate = responseData.candidates[0];
                  if (candidate.finishReason && candidate.finishReason !== "STOP") { throw new Error(`Análise interrompida (${candidate.finishReason}).`); }
                  if (!candidate.content?.parts?.length || !candidate.content.parts[0].text) { throw new Error("A API retornou uma resposta vazia."); }

                  analysisText = candidate.content.parts[0].text;
                  analysisHTML = REPORT_DISCLAIMER_HTML + formatResult(analysisText, file.name);

                 // Append result to the main report area
                 reportContent.insertAdjacentHTML('beforeend', analysisHTML);

                 // Update state for the *last* successful analysis (for modal/share)
                 currentResultText = analysisText;
                 currentImageBase64 = base64Image;
                 lastSuccessfulAnalysisHTML = analysisHTML; // Store HTML for modal

                 // 5. Save to History
                 saveToHistory(analysisText, base64Image, getCategory(analysisText, mimeType), file.name); // Pass file name
                 return true; // Indicate success

            } catch (error) {
                console.error(`Error analyzing ${file.name}:`, error);
                // Append error box to the main report area
                reportContent.insertAdjacentHTML('beforeend', createErrorBoxHTML(file.name, error.message));
                return false; // Indicate failure
            } finally {
                // Clean up temporary variables for this specific file if needed
                // Do not hide loading here, it's handled by processFiles
                imageInput.value = ''; // Clear file input (might prevent re-uploading same file immediately)
                 stopCamera(); // Ensure camera is off if it was used
            }
        }


        // --- History Management (IndexedDB - modified save) ---
        function saveToHistory(text, imageBase64, category, fileName = 'Analise') { // Added fileName
            if (!db) { console.warn("DB not ready, skipping history save."); return; }
            const analysisData = {
                text: text,
                imageBase64: imageBase64, // Consider limiting size or using lower quality for history?
                timestamp: new Date().toISOString(),
                category: category,
                fileName: fileName // Store file name
             };
            const transaction = db.transaction(['analyses'], 'readwrite');
            const store = transaction.objectStore('analyses');
            const request = store.add(analysisData);
            request.onsuccess = (e) => {
                analysisData.id = e.target.result;
                allHistoryItems.unshift(analysisData); // Add to front of in-memory list
                // Re-rendering history is now handled by applyFiltersAndRenderHistory at the end of processing or tab switch
                console.log("Analysis saved ID:", analysisData.id, "File:", fileName);
            };
            request.onerror = (event) => { console.error("Error saving history:", event.target.error); notify('Erro ao salvar no histórico.', 'error'); };
        }
        function loadInitialHistory() { /* ... same logic, uses applyFiltersAndRenderHistory ... */
            if (!db) { return; }
            // Avoid reloading if already loaded
            if (allHistoryItems.length > 0 && !historyContainer.innerHTML.includes('Carregando')) {
                 console.log("History already loaded in memory.");
                 applyFiltersAndRenderHistory(); // Ensure it's rendered with current filters
                 return;
            }
            showLoading("Carregando histórico...");
            historyContainer.innerHTML = '<p class="text-center text-color-muted py-10">Carregando...</p>'; // Show loading inside history panel
             const transaction = db.transaction(['analyses'], 'readonly');
             const store = transaction.objectStore('analyses');
             const request = store.getAll();
             request.onsuccess = () => {
                 allHistoryItems = request.result || [];
                 applyFiltersAndRenderHistory(); // Apply default sort and render
                 hideLoading();
             };
             request.onerror = (event) => { /* ... error handling ... */
                  console.error("Error loading history:", event.target.error); notify('Erro ao carregar histórico.', 'error');
                  historyContainer.innerHTML = ''; // Clear loading message
                  noHistory.classList.remove('hidden'); noHistory.textContent = "Erro ao carregar o histórico.";
                  hideLoading();
             };
        }
        function getFilteredAndSortedHistory() { /* ... same filtering/sorting logic ... */
              let filtered = [...allHistoryItems];
              if (filterTerm) { filtered = filtered.filter(item => (item.text || '').toLowerCase().includes(filterTerm.toLowerCase()) || (item.fileName || '').toLowerCase().includes(filterTerm.toLowerCase()) ); } // Search filename too
              if (selectedCategory) { filtered = filtered.filter(item => item.category === selectedCategory); }
              switch (sortType) {
                  case 'oldest': filtered.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)); break;
                  case 'recent': default: filtered.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)); break;
              }
              return filtered;
        }


        // --- Rendering History ---
        function applyFiltersAndRenderHistory() { /* ... same, calls renderHistory ... */
            filterTerm = searchInput.value.trim(); sortType = sortOrder.value; selectedCategory = categoryFilter.value;
            currentPage = 1; renderHistory();
        }
        function renderHistory() { /* ... same logic, calls createHistoryItemHTML ... */
             const filteredItems = getFilteredAndSortedHistory();
             noHistory.classList.toggle('hidden', filteredItems.length > 0 || allHistoryItems.length === 0);
             noHistory.classList.toggle('block', filteredItems.length === 0 && allHistoryItems.length > 0);
             noHistory.textContent = "Nenhuma análise encontrada no histórico com os filtros atuais."; // Specific message

             const start = (currentPage - 1) * itemsPerPage;
             const end = start + itemsPerPage;
             const paginatedItems = filteredItems.slice(start, end);

             historyContainer.className = `min-h-[200px] ${viewMode === 'grid' ? 'history-grid' : 'history-list'}`;
             if (currentPage === 1) { historyContainer.innerHTML = ''; } // Clear only if first page

             // Batch append for potentially better performance
             const fragment = document.createDocumentFragment();
             paginatedItems.forEach(item => {
                 const element = document.createElement('div'); // Create a temporary container
                 element.innerHTML = createHistoryItemHTML(item);
                 fragment.appendChild(element.firstElementChild); // Append the actual item element
             });
             historyContainer.appendChild(fragment);

             addHistoryItemListeners(historyContainer); // Re-attach listeners to the whole container

             const hasMoreItems = end < filteredItems.length;
             pagination.classList.toggle('hidden', !hasMoreItems);
             loadMore.disabled = !hasMoreItems;
             listView.classList.toggle('active-view', viewMode === 'list');
             gridView.classList.toggle('active-view', viewMode === 'grid');
        }
        function addHistoryItemListeners(container) { /* ... same robust listener attachment ... */
            container.querySelectorAll('.view-btn[data-id]').forEach(viewBtn => {
                const id = parseInt(viewBtn.dataset.id);
                if (!viewBtn.dataset.listenerAttached) { // Prevent attaching multiple listeners
                    viewBtn.onclick = () => viewAnalysis(id);
                    viewBtn.dataset.listenerAttached = 'true';
                }
            });
            container.querySelectorAll('.delete-btn[data-id]').forEach(deleteBtn => {
                const id = parseInt(deleteBtn.dataset.id);
                 if (!deleteBtn.dataset.listenerAttached) {
                    deleteBtn.onclick = () => deleteAnalysis(id);
                    deleteBtn.dataset.listenerAttached = 'true';
                }
            });
        }
        function createHistoryItemHTML(item) { /* ... Adjusted to show fileName ... */
            const date = new Date(item.timestamp).toLocaleString('pt-BR', { day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit' });
            const firstSentenceMatch = (item.text || '').match(/^.*?[.!?](?:\s|$)/);
            let summaryText = firstSentenceMatch ? firstSentenceMatch[0].trim() : (item.text || '').substring(0, 80).replace(/\n/g, ' '); // Shorter summary
            summaryText = summaryText.replace(/<[^>]*>/g, '').replace(/[\*_#]+/g, '').trim();
            if ((item.text || '').length > 80 && !firstSentenceMatch) summaryText += '...';

            const category = item.category || 'Indefinido';
            let categoryColor = 'text-color-muted';
             if (category === 'Normal') categoryColor = 'text-green-600 dark:text-green-400';
             else if (['Imagem Médica', 'Radiografia', 'Tomografia', 'Ressonância', 'Pele', 'Ortopedia', 'Pulmonar', 'Mamografia', 'Ultrassom'].includes(category)) categoryColor = 'text-blue-600 dark:text-blue-400';
             else if (category === 'Com Achados') categoryColor = 'text-orange-500 dark:text-orange-400';

            const imageSrc = item.imageBase64 ? `data:image/jpeg;base64,${item.imageBase64}` : PLACEHOLDER_IMG;
            const fileName = item.fileName || 'Análise sem nome';

             return `
                 <div class="history-item card-bg dark:history-item border-color-light dark:border-color-base" data-id="${item.id}">
                     <img src="${imageSrc}" alt="Imagem de ${fileName}" loading="lazy" class="border border-color-light dark:history-item-img">
                     <div class="history-item-content text-color-secondary dark:text-color-secondary">
                         <p class="history-item-summary text-color-base dark:text-color-base">${summaryText || 'Relatório vazio.'}</p>
                         <p class="history-item-meta text-color-muted dark:text-color-muted">
                            <span class="${categoryColor} font-medium">${category}</span> • ${fileName} • ${date}
                         </p>
                     </div>
                     <div class="history-item-actions">
                         <button data-id="${item.id}" class="view-btn icon-button text-blue-600 dark:text-blue-400" title="Visualizar Análise"><i class="fas fa-eye"></i></button>
                         <button data-id="${item.id}" class="delete-btn icon-button text-red-600 dark:text-red-400" title="Excluir Análise"><i class="fas fa-trash"></i></button>
                     </div>
                 </div>
             `;
        }
        function viewAnalysis(id) { // **MODIFIED** Clears report area first
             if (!db) return notify("Banco de dados não disponível.", "error");
             const transaction = db.transaction(['analyses'], 'readonly');
             const store = transaction.objectStore('analyses');
             const request = store.get(id);
             request.onsuccess = () => {
                 const analysis = request.result;
                 if (analysis) {
                     currentResultText = analysis.text || '';
                     currentImageBase64 = analysis.imageBase64 || '';
                     const formattedResult = REPORT_DISCLAIMER_HTML + formatResult(analysis.text, analysis.fileName);
                     lastSuccessfulAnalysisHTML = formattedResult; // Update for modal

                     // Clear current report and show only the selected historical one
                     reportContent.innerHTML = formattedResult;
                     reportPlaceholder.classList.add('hidden');

                     modalReportContent.innerHTML = formattedResult; // Update modal content too
                     reportControls.classList.remove('hidden'); // Show controls
                     speakButton.disabled = !currentResultText; // Enable/disable based on content
                     fullScreenButton.disabled = !currentResultText;

                     activateTab('report'); // Switch to report tab
                     reportSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                 } else { notify("Análise não encontrada no histórico.", "error"); }
             };
             request.onerror = (event) => { notify('Erro ao carregar análise do histórico.', 'error'); console.error(event.target.error);};
        }
        function deleteAnalysis(id) { /* ... same logic, uses applyFiltersAndRenderHistory ... */
             if (!db) return notify("Banco de dados não disponível.", "error");
             if (!confirm("Excluir esta análise do histórico? Esta ação não pode ser desfeita.")) return;
             const transaction = db.transaction(['analyses'], 'readwrite');
             const store = transaction.objectStore('analyses');
             const request = store.delete(id);
             request.onsuccess = () => {
                 notify('Análise excluída do histórico!', 'success');
                 allHistoryItems = allHistoryItems.filter(item => item.id !== id);
                 applyFiltersAndRenderHistory(); // Re-render history view
             };
             request.onerror = (event) => { notify('Erro ao excluir análise.', 'error'); console.error(event.target.error);};
        }

        // --- Event Listeners ---
        themeToggle.addEventListener('click', () => { /* ... same ... */ const isDark = document.body.classList.toggle('dark-theme'); themeToggle.innerHTML = isDark ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>'; localStorage.setItem('theme', isDark ? 'dark' : 'light'); });
        if (localStorage.getItem('theme') === 'dark') { document.body.classList.add('dark-theme'); themeToggle.innerHTML = '<i class="fas fa-sun"></i>'; }

        // Upload Button & Input (Handles Multiple)
        uploadButton.addEventListener('click', () => imageInput.click());
        imageInput.addEventListener('change', (event) => {
            processFiles(event.target.files); // Pass FileList directly
            // event.target.value = null; // Reset input value to allow re-uploading the same file(s) - uncomment if needed
        });

        // Dropzone (Handles Multiple)
        dropzone.addEventListener('dragover', (e) => { e.preventDefault(); dropzone.classList.add('dragover'); });
        dropzone.addEventListener('dragleave', () => dropzone.classList.remove('dragover'));
        dropzone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropzone.classList.remove('dragover');
            processFiles(e.dataTransfer?.files); // Pass FileList directly
        });
        // Prevent dropzone click from triggering input if clicking buttons
        dropzoneContent.addEventListener('click', (e) => { if (!e.target.closest('button') && !isProcessing) imageInput.click(); });

        // Camera Functions (Single Capture)
        async function startCamera() { /* ... same robust camera start logic ... */
            if (isProcessing) { notify("Aguarde a análise atual terminar.", "info"); return; }
            if (!navigator.mediaDevices?.getUserMedia) { notify("Câmera não suportada.", "error"); return; }
            if (!currentApiKey) { notify('Configure a API Key primeiro.', 'error'); apiKeyInput.focus(); return; }
            stopCamera(); // Ensure previous stream is stopped
            showLoading("Iniciando câmera...");
            try {
                 const constraints = { video: { facingMode: { exact: "environment" } } };
                 try { cameraStream = await navigator.mediaDevices.getUserMedia(constraints); }
                 catch (err) { console.warn("Câmera traseira falhou, tentando padrão:", err); cameraStream = await navigator.mediaDevices.getUserMedia({ video: true }); }
                 cameraPreview.srcObject = cameraStream; await cameraPreview.play();
                 cameraPreview.classList.remove('hidden'); cameraControlsContainer.classList.remove('hidden'); dropzoneContent.classList.add('hidden');
                 hideLoading(); notify("Câmera iniciada.", "info");
             } catch (err) { /* ... same error handling ... */
                 hideLoading(); console.error("Camera Error:", err);
                 if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') notify("Permissão da câmera negada.", "error");
                 else if (err.name === 'NotFoundError' || err.name === 'DevicesNotFoundError') notify("Nenhuma câmera encontrada.", "error");
                 else if (err.name === 'NotReadableError' || err.name === 'TrackStartError') notify("Câmera já está em uso por outro app?", "error");
                 else notify(`Erro ao acessar câmera: ${err.name || err.message}`, "error");
                 stopCamera();
             }
        }
        function stopCamera() { /* ... same ... */ if (cameraStream) { cameraStream.getTracks().forEach(track => track.stop()); cameraStream = null; } cameraPreview.srcObject = null; cameraPreview.classList.add('hidden'); cameraControlsContainer.classList.add('hidden'); dropzoneContent.classList.remove('hidden'); }
        cameraButton.addEventListener('click', startCamera);
        stopCameraButton.addEventListener('click', stopCamera);
        captureButton.addEventListener('click', async () => { /* Captures single image */
            if (isProcessing) { notify("Aguarde a análise atual terminar.", "info"); return; }
            if (!cameraStream || !cameraPreview.videoWidth || cameraPreview.paused) return notify("Câmera não está pronta.", "error");
            const context = cameraCanvas.getContext('2d'); cameraCanvas.width = cameraPreview.videoWidth; cameraCanvas.height = cameraPreview.videoHeight;
            context.drawImage(cameraPreview, 0, 0, cameraCanvas.width, cameraCanvas.height);
            stopCamera(); // Stop camera after capture
            showLoading("Capturando e processando...");
            cameraCanvas.toBlob(async (blob) => {
                if (blob) {
                    // Process this single captured image using processFiles
                    const capturedFile = new File([blob], `capture-${Date.now()}.jpg`, { type: 'image/jpeg' });
                    await processFiles([capturedFile]); // Pass as a single-item array
                } else {
                    notify("Falha ao capturar imagem.", "error"); hideLoading(); isProcessing = false;
                }
            }, 'image/jpeg', 0.9);
        });

        // Report Controls (Font, Speak - acts on last result)
        fontIncrease.addEventListener('click', () => { /* ... same ... */ if (fontSize < 24) { fontSize += 1; reportContent.style.fontSize = `${fontSize}px`; modalReportContent.style.fontSize = `${fontSize}px`; } });
        fontDecrease.addEventListener('click', () => { /* ... same ... */ if (fontSize > 10) { fontSize -= 1; reportContent.style.fontSize = `${fontSize}px`; modalReportContent.style.fontSize = `${fontSize}px`; } });
        speakButton.addEventListener('click', () => { /* Acts on currentResultText (last success) */
             if (!synth) return notify('Leitura não suportada.', 'error');
             if (!currentResultText) return notify('Nenhum relatório válido para ler.', 'info');
             if (synth.speaking) { synth.cancel(); speakButton.innerHTML = '<i class="fas fa-volume-up"></i>'; speakButton.title = "Ler Último Relatório"; speakButton.classList.remove('speaking'); }
             else {
                 const textToSpeak = currentResultText.replace(/<[^>]*>/g, ' ').replace(/[\*\_#]+/g, '').replace(/\s\s+/g, ' ').trim();
                 if (!textToSpeak) { notify("Não há texto para ler no último relatório.", "info"); return; }
                 utterance = new SpeechSynthesisUtterance(textToSpeak); utterance.lang = 'pt-BR';
                 utterance.onerror = (event) => { console.error('Speech error:', event.error); notify(`Erro na leitura: ${event.error}`, 'error'); speakButton.innerHTML = '<i class="fas fa-volume-up"></i>'; speakButton.classList.remove('speaking'); };
                 utterance.onend = () => { speakButton.innerHTML = '<i class="fas fa-volume-up"></i>'; speakButton.classList.remove('speaking'); };
                 synth.speak(utterance); speakButton.innerHTML = '<i class="fas fa-stop-circle"></i>'; speakButton.title = "Parar Leitura"; speakButton.classList.add('speaking');
             }
        });
        window.addEventListener('beforeunload', () => { if (synth?.speaking) synth.cancel(); });

        // Modal Handling & Actions (Acts on last successful result)
        fullScreenButton.addEventListener('click', () => { if (lastSuccessfulAnalysisHTML) { modalReportContent.innerHTML = lastSuccessfulAnalysisHTML; reportModal.style.display = 'flex'; modalReportContent.style.fontSize = `${fontSize}px`; } else { notify('Nenhum relatório válido para tela cheia.', 'info'); } });
        closeModal.addEventListener('click', () => { reportModal.style.display = 'none'; if (synth?.speaking) synth.cancel(); });
        reportModal.addEventListener('click', (event) => { if (event.target === reportModal) { reportModal.style.display = 'none'; if (synth?.speaking) synth.cancel(); } });
        printButton.addEventListener('click', () => { /* Uses lastSuccessfulAnalysisHTML and currentImageBase64 */
             if (!lastSuccessfulAnalysisHTML) return notify("Nenhum relatório válido para imprimir.", "info");
             const printWindow = window.open('', '_blank');
             printWindow.document.write(`<!DOCTYPE html>...`); // Use the same improved print styles/structure
             printWindow.document.write(`
                 <!DOCTYPE html><html lang="pt-BR"><head><meta charset="UTF-8"><title>Relatório - Análise Médicas IA</title>
                 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
                 <style>body{font-family:Inter,sans-serif;line-height:1.6;padding:25px;color:#1f2937}img{max-width:300px;max-height:300px;display:block;margin:0 auto 25px auto;border-radius:8px;border:1px solid #eee;object-fit:contain}h2{font-size:1.6rem;border-bottom:2px solid #ccc;padding-bottom:10px;margin-bottom:25px;text-align:center}.report-section h4{font-weight:600;font-size:1.15rem;margin-top:1.5rem;margin-bottom:.6rem;color:#1e3a8a;display:flex;align-items:center;gap:.6rem;padding-bottom:.3rem;border-bottom:1px solid #d1d5db}.report-section h4 i{display:none}.report-section p{margin-bottom:.8rem;text-align:justify}.report-section strong{color:#111827}.report-section em{color:#4b5563;font-style:italic}p.bg-yellow-50{background-color:#fef3c7!important;border:1px solid #fde68a!important;padding:10px;margin-bottom:20px;color:#78350f;border-radius:4px;font-size:.9rem}p.bg-yellow-50 strong{color:#78350f}button,.icon-button,#reportControls{display:none!important}@media print{body{padding:15px}img{max-width:80%}h2{font-size:1.4rem}}</style>
                 </head><body><h2>Relatório - Análise Médicas IA</h2>
                 ${currentImageBase64 ? '<img src="data:image/jpeg;base64,'+currentImageBase64+'" alt="Imagem Analisada">' : ''}
                 ${lastSuccessfulAnalysisHTML}
                 <script>setTimeout(() => { window.print(); window.close(); }, 750);<\/script></body></html>`);
             printWindow.document.close();
        });
        whatsappButton.addEventListener('click', () => { /* Uses currentResultText (last success) */
             if (!currentResultText) return notify("Nenhum relatório válido para compartilhar.", "info");
             const disclaimerText = "Atenção: Análise preliminar por IA. Não substitui avaliação médica profissional.";
             const shortText = currentResultText.substring(0, 800) + (currentResultText.length > 800 ? '...' : '');
             const message = encodeURIComponent(`*Análise Médicas IA:*\n\n${shortText}\n\n_${disclaimerText}_\n\n_Gerado por Análise Médicas IA_`);
             window.open(`https://wa.me/?text=${message}`, '_blank', 'noopener,noreferrer');
        });
        shareButton.addEventListener('click', async () => { /* Uses currentResultText (last success) */
             if (!currentResultText) return notify("Nenhum relatório válido para compartilhar.", "info");
             const disclaimerText = "\nAtenção: Análise preliminar por IA. Não substitui avaliação médica profissional.";
             const shareData = { title: 'Relatório - Análise Médicas IA', text: currentResultText + disclaimerText };
             try {
                 if (navigator.share) { await navigator.share(shareData); }
                 else { navigator.clipboard.writeText(shareData.text).then(() => notify('Relatório copiado!', 'success')).catch(err => notify('Falha ao copiar.', 'error')); }
             } catch (err) { if (err.name !== 'AbortError') notify(`Erro ao compartilhar: ${err.message}`, 'error'); }
        });
        downloadButton.addEventListener('click', () => { /* Uses currentResultText and currentImageBase64 (last success) */
             if (!currentResultText) return notify("Nenhum relatório válido para baixar.", "info");
             try {
                 const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
                 doc.setFont('helvetica', 'normal'); const margin = 15; const contentWidth = doc.internal.pageSize.width - 2 * margin; let currentY = margin;
                 doc.setFontSize(16); doc.setFont('helvetica', 'bold'); doc.text('Relatório - Análise Médicas IA', doc.internal.pageSize.width / 2, currentY, { align: 'center' }); currentY += 10;
                 if (currentImageBase64) { /* ... same robust image adding logic ... */
                     try {
                          const imgData = `data:image/jpeg;base64,${currentImageBase64}`; const imgProps = doc.getImageProperties(imgData); const aspectRatio = imgProps.width / imgProps.height;
                          let imgWidth = 80; let imgHeight = imgWidth / aspectRatio; const maxHeight = 80;
                          if (imgHeight > maxHeight) { imgHeight = maxHeight; imgWidth = imgHeight * aspectRatio; }
                          const imgX = (doc.internal.pageSize.width - imgWidth) / 2;
                          if (currentY + imgHeight < doc.internal.pageSize.height - margin) { doc.addImage(imgData, 'JPEG', imgX, currentY, imgWidth, imgHeight); currentY += imgHeight + 10; }
                          else { doc.addPage(); currentY = margin; doc.addImage(imgData, 'JPEG', imgX, currentY, imgWidth, imgHeight); currentY += imgHeight + 10; }
                      } catch (imgError) { console.error("PDF Img Err:", imgError); currentY += 5; }
                 }
                 doc.setFontSize(9); doc.setFont('helvetica', 'italic'); doc.setTextColor(150, 0, 0);
                 const disclaimerLines = doc.splitTextToSize("Atenção: Esta é uma análise preliminar por IA e não substitui a avaliação de um profissional de saúde qualificado.", contentWidth);
                 disclaimerLines.forEach(line => { if (currentY + 4 > doc.internal.pageSize.height - margin) { doc.addPage(); currentY = margin; } doc.text(line, margin, currentY); currentY += 4; });
                 doc.setTextColor(0, 0, 0); currentY += 6;
                 doc.setFontSize(10); doc.setFont('helvetica', 'normal');
                 let pdfText = currentResultText.replace(/<p[^>]*>/gi,'\n').replace(/<\/p>/gi,'').replace(/<br\s*\/?>/gi,'\n').replace(/<strong[^>]*>/gi,'').replace(/<\/strong>/gi,'').replace(/<em[^>]*>/gi,'').replace(/<\/em>/gi,'').replace(/<[^>]*>/g,'').replace(/[\*_#]+/g,'').replace(/\n\s*\n/g,'\n').replace(/ /g,' ').trim();
                 const textLines = doc.splitTextToSize(pdfText, contentWidth);
                 textLines.forEach(line => { if (currentY + 5 > doc.internal.pageSize.height - margin) { doc.addPage(); currentY = margin; } doc.text(line, margin, currentY); currentY += 5; });
                 doc.save(`AnaliseMedicaIA_Relatorio_${new Date().toISOString().slice(0,10).replace(/-/g,'')}.pdf`); notify('PDF gerado!', 'success');
             } catch (error) { console.error("jsPDF Err:", error); notify(`Erro ao gerar PDF: ${error.message || error}`, 'error'); }
        });

        // History Filters/Pagination/View Listeners
        applyFilters.addEventListener('click', applyFiltersAndRenderHistory);
        searchInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') applyFiltersAndRenderHistory(); });
        searchInput.addEventListener('search', applyFiltersAndRenderHistory); // Handle clearing
        loadMore.addEventListener('click', () => { if (!loadMore.disabled) { currentPage++; renderHistory(); } });
        listView.addEventListener('click', () => { if (viewMode !== 'list') { viewMode = 'list'; currentPage = 1; renderHistory(); } });
        gridView.addEventListener('click', () => { if (viewMode !== 'grid') { viewMode = 'grid'; currentPage = 1; renderHistory(); } });
        categoryFilter.addEventListener('change', applyFiltersAndRenderHistory);
        sortOrder.addEventListener('change', applyFiltersAndRenderHistory);

        // --- Tab Switching Logic ---
        function activateTab(tabName) { /* ... same robust tab switching ... */
             const isReportTab = tabName === 'report';
             tabButtonReport.classList.toggle('active', isReportTab); tabButtonReport.setAttribute('aria-selected', isReportTab);
             tabButtonHistory.classList.toggle('active', !isReportTab); tabButtonHistory.setAttribute('aria-selected', !isReportTab);
             tabPanelReport.classList.toggle('hidden', !isReportTab);
             tabPanelHistory.classList.toggle('hidden', isReportTab);
             // Load history only if switching to history tab and it's empty
             if (!isReportTab && allHistoryItems.length === 0 && !historyContainer.innerHTML.includes('Carregando')) {
                 loadInitialHistory();
             } else if (!isReportTab) {
                 // Ensure history is rendered correctly when switching back
                 applyFiltersAndRenderHistory();
             }
        }
        tabButtonReport.addEventListener('click', () => activateTab('report'));
        tabButtonHistory.addEventListener('click', () => activateTab('history'));

        // --- Initial Setup ---
        updateApiKeyStatus();
        reportContent.style.fontSize = `${fontSize}px`;
        modalReportContent.style.fontSize = `${fontSize}px`;
        // Ensure placeholder is visible initially
        reportPlaceholder.classList.remove('hidden');

    </script>
</body>
</html>
